{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/tracking.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "document.addEventListener('DOMContentLoaded', function () {\n  // Target all forms on the page\n  const forms = document.querySelectorAll('form');\n  if (forms.length === 0) return;\n\n  forms.forEach((form) => {\n    console.log(form);\n\n    // Track which fields have been interacted with and if form interaction has been logged\n    const interactedFields = new Set();\n    let formInteractionTracked = false;\n\n    // Add listeners to all form inputs\n    form.querySelectorAll('input, select, textarea').forEach((input) => {\n      const inputName = input.name || input.id || input.type;\n\n      // Use a single function for both events\n      const trackInteraction = function () {\n        // Track first overall form interaction\n        if (!formInteractionTracked) {\n          formInteractionTracked = true;\n\n          window.dataLayer = window.dataLayer || [];\n          window.dataLayer.push({\n            event: 'form_started_',\n            form_id: form.id || 'unnamed_form',\n            form_url: window.location.href,\n          });\n        }\n\n        // Track first interaction with specific field\n        if (!interactedFields.has(inputName)) {\n          window.dataLayer = window.dataLayer || [];\n          window.dataLayer.push({\n            event: 'form_interaction',\n            form_id: form.id || 'unnamed_form',\n            form_url: window.location.href,\n            field_name: inputName,\n          });\n\n          interactedFields.add(inputName);\n        }\n      };\n\n      // Listen for appropriate events based on input type\n      input.addEventListener('input', trackInteraction);\n      if (input.type === 'checkbox' || input.type === 'radio') {\n        input.addEventListener('change', trackInteraction);\n      }\n    });\n  });\n});\n\n// document.addEventListener('DOMContentLoaded', function() {\n//   // Target only the specific form\n//   const form = document.getElementById('wf-book-a-demo');\n//   if (!form) return;\n\n//   // Track which fields have been interacted with and if form interaction has been logged\n//   const interactedFields = new Set();\n//   let formInteractionTracked = false;\n\n//   // Add listeners to all form inputs\n//   form.querySelectorAll('input, select, textarea').forEach(input => {\n//     const inputName = input.name || input.id || input.type;\n\n//     // Use a single function for both events\n//     const trackInteraction = function() {\n//       // Track first overall form interaction\n//       if (!formInteractionTracked) {\n//         formInteractionTracked = true;\n\n//         window.dataLayer = window.dataLayer || [];\n//         window.dataLayer.push({\n//           event: 'book_demo_form_started',\n//           form_id: 'wf-book-a-demo',\n//           form_url: window.location.href\n//         });\n//       }\n\n//       // Track first interaction with specific field\n//       if (!interactedFields.has(inputName)) {\n//         interactedFields.add(inputName);\n\n//         window.dataLayer = window.dataLayer || [];\n//         window.dataLayer.push({\n//           event: 'book_demo_form_interaction',\n//           form_id: 'wf-book-a-demo',\n//           form_url: window.location.href,\n//           field_name: inputName\n//         });\n//       }\n//     };\n\n//     // Listen for appropriate events based on input type\n//     input.addEventListener('input', trackInteraction);\n//     if (input.type === 'checkbox' || input.type === 'radio') {\n//       input.addEventListener('change', trackInteraction);\n//     }\n//   });\n// });\n\n// document.querySelectorAll('.tooltip_component').forEach((tooltip) => {\n//   const hoverFeature = tooltip.getAttribute('data-track-text');\n//   tooltip.addEventListener('mouseenter', () => {\n//     /// add window.dataLayer = window.dataLayer || [];\n//   });\n// });\n"],
  "mappings": ";;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACA7F,WAAS,iBAAiB,oBAAoB,WAAY;AAExD,UAAM,QAAQ,SAAS,iBAAiB,MAAM;AAC9C,QAAI,MAAM,WAAW;AAAG;AAExB,UAAM,QAAQ,CAAC,SAAS;AACtB,cAAQ,IAAI,IAAI;AAGhB,YAAM,mBAAmB,oBAAI,IAAI;AACjC,UAAI,yBAAyB;AAG7B,WAAK,iBAAiB,yBAAyB,EAAE,QAAQ,CAAC,UAAU;AAClE,cAAM,YAAY,MAAM,QAAQ,MAAM,MAAM,MAAM;AAGlD,cAAM,mBAAmB,WAAY;AAEnC,cAAI,CAAC,wBAAwB;AAC3B,qCAAyB;AAEzB,mBAAO,YAAY,OAAO,aAAa,CAAC;AACxC,mBAAO,UAAU,KAAK;AAAA,cACpB,OAAO;AAAA,cACP,SAAS,KAAK,MAAM;AAAA,cACpB,UAAU,OAAO,SAAS;AAAA,YAC5B,CAAC;AAAA,UACH;AAGA,cAAI,CAAC,iBAAiB,IAAI,SAAS,GAAG;AACpC,mBAAO,YAAY,OAAO,aAAa,CAAC;AACxC,mBAAO,UAAU,KAAK;AAAA,cACpB,OAAO;AAAA,cACP,SAAS,KAAK,MAAM;AAAA,cACpB,UAAU,OAAO,SAAS;AAAA,cAC1B,YAAY;AAAA,YACd,CAAC;AAED,6BAAiB,IAAI,SAAS;AAAA,UAChC;AAAA,QACF;AAGA,cAAM,iBAAiB,SAAS,gBAAgB;AAChD,YAAI,MAAM,SAAS,cAAc,MAAM,SAAS,SAAS;AACvD,gBAAM,iBAAiB,UAAU,gBAAgB;AAAA,QACnD;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;",
  "names": []
}
